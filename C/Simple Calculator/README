Explicatie solutie (toate task-urile): Pentru a retine numerele folosim un vector de tip float, iar pentru a retine operatiile folosim un vector de tip char. 
	Prima intrebare care apare este cum facem sa executam operatiile in ordinea ceruta. Astfel, am ales prioritati pentru fiecare operatie: 
	- '+', '-' au cea mai mica prioritate pentru a se efectua ultimele (2 sau 3 in task-ul 2 respectiv 3 si 1 in task-ul 1, deoarece nu ne intereseaza prioritatea)
	- '*', '/' au cea mai mare prioritate pentru a se efectua primele (1 pentru fiecare task)
	- '#' prioritatea 2 in task-ul 3 (intre '*' si '+')

	Rezolvarea se bazeaza pe parcurgerea vectorului de operatii de atatea ori cate prioritati avem. 
	La prima parcurgere se executa operatiile de prioritate 1, la a doua de prioritate 2, si asa mai departe.

	Urmatoarea intrebare este ce facem cu rezultatul dintre operatii. Am decis sa pastrez rezultatul pe pozitia primului numar. Ce facem ca al doilea numar sa nu mai fie parcurs, totusi?
	Am declarat un vector mask care are rolul de a retine care sunt numerele care nu mai trebuie parcurse. Astfel: initial vectorul mask are valoarea 1 pentru orice pozitie, 
	iar atunci cand un element nu mai vrem sa fie parcurs modificam valoarea corespunzatoare pozitiei elementului in mask[pozitie] = 0. 
		Exemplu: 1 2 3 4 si "*+/" => 2 2 3 4 (s-a efectuat operatia de inmultire intre 1 si 2, iar 2 nu mai vrem sa fie parcurs, astfel mask[pozitia lui 2] = 0)	
 	 	mask[]:  1 1 1 1 	     1 0 1 1
 	
	Dificultatea care apare este felul in care trebuie parcurse numerele. Operatia care trebuie efectuata este identificata doar prin operator si primul numar, 
	neavand nevoie de un index pentru al doilea numar, deoarece stim ca el este primul numar care urmeaza in vectorul de numere, cu valoarea 1 a mastii.
      	Exemplu: 1 2 3  si "**" => 2 2 3 => 6 2 3 	
 	 mask[]: 1 1 1 	        => 1 0 1 => 1 0 0 
	(La prima operatie avem operatorul '*' si index-ul in vectorul de numere care indica pozitia 0. Nu avem nevoie de un al doilea index, 
	deoarece stim ca numarul cu care trebuie efectuata operatia se afla pe urmatoarea pozitie (pentru ca mask = 1). 
	La fel pentru a doua operatie '*'. Urmatoarea pozitie pentru care mask[pozitie] = 1 este pozitia 2 (numarul 3)). 
    
	Se efectueaza operatia, ce facem cu index-ul numarului? Distingem 3 situatii:
	-Daca operatia care urmeaza are prioritate mai mica, decat cea corespunzatoare parcurgerii, atunci index-ul numarului trece mai departe.
		Exemplu: Parcurgere pentru prioritate 1 ('*' si '/')
		indexNumbers:0                =>  0            =>       2   
		   	     1 2 4 4 si "*+/" =>  2 2 4 4      =>   2 2 1 4    
 	        mask[]:	     1 1 1 1 	      =>  1 0 1 1      =>   1 0 1 0
	
	-Daca operatia care urmeaza are prioritate egala cu cea corespunzatoare parcurgerii, atunci index-ul numarului ramane in aceeasi pozitie.
      	Exemplu: Parcurgere pentru prioritate 1
		 indexNumbers:0                   =>  0            =>        2   
		   	 	 1 3 2 1 si "**/" =>  3 3 4 4      =>   12 3 4 4    
 	 	 mask[]: 	 1 1 1 1 	  =>  1 0 1 1      =>   1  0 0 1
	
	-Daca operatia care urmeaza are prioritate mai mare, atunci index-ul numarului ramane in aceeasi pozitie, deoarece operatia trebuie sa fi fost deja efectuata.
		Exemplu: Sarim direct la parcurgerea pentru prioritatea 2 ('+' si '-')
		indexNumbers:0                    =>       => 0 (Se evalueaza ('+'))    =>  0 (Se evaluaeaza '*' si nu se intampla nimic) => 0      
		   	 	 1 3 2 1 si "+*+" => ...   => 3 6 2 1        		=>  9 6 2 1                                       => 9 6 2 1 								
 	 	mask[]: 	 1 1 1 1 	  =>       => 1 1 0 1      		=>  1 0 0 1                                       => 1 0 0 1
	Distinctia dintre aceste cazuri se face in program cu ajutorul unei variabile ajutatoare numita numbersIndexHelp.
	
	Programele celor trei task-uri sunt foarte asemanatoare:
	La primul task, toate operatiile au prioritatea 1 si se face o singura parcurgere. 
	La al doilea task, operatiile '*' si '/' au prioritatea 1 si '+' si '-' au prioritatea 2 si se fac doua parcurgeri.
	La al treilea task, definim operatia noua si ii dam prioritatea 2. Astfel, operatiile '*' si '/' au prioritatea 1 si '+' si '-' au prioritatea 3 si se fac trei parcurgeri.
	
	Chiar daca eficienta nu este cea mai buna pentru acest algoritm, el este foarte scalabil pentru mai multe operatii. 
	Astfel, pentru a adauga o noua operatie tot ce trebuie sa facem este sa definim operatia si prioritatea pentru aceasta.
	


	
