/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import jdk.jshell.execution.Util;
import netscape.javascript.JSObject;

import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.text.DateFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


public class App {

    /* All the users on the platform */

    private ArrayList<Utilizator> users;

    final static private String filenameUsers = "users.csv";
    final static private String filenamePosts = "posts.csv";
    final static private String filenameFollows = "follows.csv";
    final static private String filenameLikesPost = "likesPost.csv";
    final static private String filenameComments = "comments.csv";
    final static private String filenameLikesComments = "likesComment.csv";

    public static SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

    public App() {
        users = new ArrayList<>();
        readUsers(filenameUsers);
        readPosts(filenamePosts);
        readFollows(filenameFollows);
        readLikesPost(filenameLikesPost);
        readComments(filenameComments);
        readLikesComments(filenameLikesComments);
    }

    /* ==================== */
    /* Intermediary Methods */
    /* ==================== */

    private Utilizator findUserById(int id) {
        for (Utilizator u : users) {
            if (u.getId() == id) {
                return u;
            }
        }
        return null;
    }

    private Postare findPostById(int id) {
        for (Utilizator u : users) {
            for (Postare p : u.getPosts()) {
                if (p.getId() == id) {
                    return p;
                }
            }
        }
        return null;
    }

    private Utilizator findUser(String username) {
        for (Utilizator u : users) {
            if (u.getUsername().equals(username)) {
                return u;
            }
        }
        return null;
    }

    private Comentariu findCommentById(int id) {
        for (Utilizator u : users) {
            for (Postare p : u.getPosts()) {
                for (Comentariu c : p.getComments()) {
                    if (c.getId() == id) {
                        return c;
                    }
                }
            }
        }
        return null;
    }

    /* Method that recreates the command line args to the wanted format */
    private static String[] recreateStrings(String[] strings) {
        String[] s = new String[20];
        int counter = 0;
        for (int i = 0; i < strings.length; i++) {
            String[] res = strings[i].split(" ", 2);
            for (int j = 0; j < res.length; j++) {
                res[j] = res[j].replace("'", "");
                s[counter++] = res[j];
            }
        }
        String[] copyOfs = new String[counter];
        for (int i = 0; i < counter; i++) {
            copyOfs[i] = s[i];
        }
        return copyOfs;
    }

    /* ==================== */
    /* File Reading Methods */
    /* ==================== */

    private void readUsers(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    Utilizator u = new Utilizator();
                    u.recreateUser(t.nextToken(), t.nextToken(), Integer.parseInt(t.nextToken()));
                    users.add(u);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Users reading from csv");
        }
    }

    private void readComments(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    int userId = Integer.parseInt(t.nextToken());
                    int postId = Integer.parseInt(t.nextToken());
                    Utilizator u = findUserById(userId);
                    Postare p = findPostById(postId);
                    Comentariu c = new Comentariu(u, p);
                    c.recreateComment(t.nextToken(), Integer.parseInt(t.nextToken()), t.nextToken());
                    p.addComment(c);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Users reading from csv");
        }
    }

    private void readPosts(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    int userId = Integer.parseInt(t.nextToken());
                    Utilizator u = findUserById(userId);
                    Postare p = new Postare(u);
                    p.recreatePost(t.nextToken(), Integer.parseInt(t.nextToken()), t.nextToken());
                    u.addPost(p);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Users reading from csv");
        }
    }

    private void readLikesPost(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    int postId = Integer.parseInt(t.nextToken());
                    int userId = Integer.parseInt(t.nextToken());
                    Utilizator u = findUserById(userId);
                    Postare p = findPostById(postId);
                    p.likedBy(u);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during likes reading from csv");
        }
    }

    private void readFollows(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    int userId = Integer.parseInt(t.nextToken());
                    int followId = Integer.parseInt(t.nextToken());
                    Utilizator u1 = findUserById(userId);
                    Utilizator u2 = findUserById(followId);
                    u1.follow(u2);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Users reading from csv");
        }
    }

    private void readLikesComments(String filename) {
        try {
            File myFile = new File(filename);
            if (!myFile.createNewFile()) {
                Scanner s = new Scanner(myFile);
                while (s.hasNextLine()) {
                    String data = s.nextLine();
                    StringTokenizer t = new StringTokenizer(data, ",");
                    int commentId = Integer.parseInt(t.nextToken());
                    int userId = Integer.parseInt(t.nextToken());
                    Utilizator u = findUserById(userId);
                    Comentariu c = findCommentById(commentId);
                    c.likedBy(u);
                }
                s.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred during likes reading from csv");
        }
    }

    /* ==================== */
    /* File Writing Methods */
    /* ==================== */

    private void writeUsers(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                out.println(users.get(i).getUsername() + "," + users.get(i).getPassword() + "," + users.get(i).getId());
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Users writing in csv");
        }
    }

    private void writeComments(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                Utilizator u = users.get(i);
                for (int j = 0; j < u.getPosts().size(); j++) {
                    Postare p = u.getPosts().get(j);
                    for (int k = 0; k < p.getComments().size(); k++) {
                        Comentariu c = p.getComments().get(k);
                        out.println(c.getParentUser().getId() + "," + c.getParentPost().getId() + "," + c.getText() +
                                "," + c.getId() + "," + c.getDate());
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Posts writing in csv");
        }
    }

    private void writePosts(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                for (int j = 0; j < users.get(i).getPosts().size(); j++) {
                    out.println(users.get(i).getId() + "," + users.get(i).getPosts().get(j).getText() +
                            "," + users.get(i).getPosts().get(j).getId() + "," + users.get(i).getPosts().get(j).getDate());
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Posts writing in csv");
        }
    }

    private void writeLikesPost(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                Utilizator u = users.get(i);
                for (int j = 0; j < u.getPosts().size(); j++) {
                    Postare p = u.getPosts().get(j);
                    for (int k = 0; k < p.getLikedByUsers().size(); k++) {
                        Utilizator u2 = p.getLikedByUsers().get(k);
                        out.println(p.getId() + "," + u2.getId());
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Posts writing in csv");
        }
    }

    private void writeFollows(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                for (int j = 0; j < users.get(i).getFollows().size(); j++) {
                    out.println(users.get(i).getId() + "," + users.get(i).getFollows().get(j).getId());
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Posts writing in csv");
        }
    }

    private void writeLikesComments(String filename) {
        try (FileWriter fw = new FileWriter(filename, false);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            for (int i = 0; i < users.size(); i++) {
                Utilizator u = users.get(i);
                for (int j = 0; j < u.getPosts().size(); j++) {
                    Postare p = u.getPosts().get(j);
                    for (int k = 0; k < p.getComments().size(); k++) {
                        Comentariu c = p.getComments().get(k);
                        for (int l = 0; l < c.getLikedByUsers().size(); l++) {
                            Utilizator u2 = c.getLikedByUsers().get(l);
                            out.println(c.getId() + "," + u2.getId());
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred during Posts writing in csv");
        }
    }

    /* ============== */
    /* Users Commands */
    /* ============== */

    public void createUser(HashMap<String, String> args) {
        String username = args.get("-u");
        String password = args.get("-p");
        if (username == null) {
            System.out.println("{'status':'error','message':'Please provide username'}");
            return;
        }
        if (password == null) {
            System.out.println("{'status':'error','message':'Please provide password'}");
            return;
        }
        Utilizator u = addUser(username, password);
        if (u == null) {
            System.out.println("{'status':'error','message':'User already exists'}");
            return;
        }
        System.out.println("{'status':'ok','message':'User created successfully'}");
    }

    private Utilizator addUser(String username, String password) {
        for (int i = 0; i < users.size(); i++) {
            if (users.get(i).getUsername().equals(username)) {
                return null;
            }
        }
        Utilizator u = new Utilizator(username, password);
        users.add(u);
        return u;
    }

    /* ================= */
    /* Comments Commands */
    /* ================= */

    public void createComment(HashMap<String, String> args, Utilizator u) {
        String post = args.get("-post-id");
        String text = args.get("-text");
        if (text == null) {
            System.out.println("{'status':'error','message':'No text provided'}");
            return;
        }
        if (text.length() > 300) {
            System.out.println("{'status':'error','message':'Comment text length exceeded'}");
            return;
        }
        if (post == null) {
            System.out.println("{'status':'error','message':'No identifier was provided'}");
            return;
        }
        int postId = Integer.parseInt(post);
        Postare p = findPostById(postId);
        if (p != null) {
            Comentariu c = new Comentariu(text, u, p);
            p.addComment(c);
            System.out.println("{'status':'ok','message':'Comment added successfully'}");
            return;
        }
        System.out.println("{'status':'error','message':'The identifier was not valid'}");
        return;
    }

    public void deleteComment(HashMap<String, String> args, Utilizator u) {
        String idArg = args.get("-id");
        if (idArg == null) {
            System.out.println("{'status':'error','message':'No identifier was provided'}");
            return;
        }
        int id = Integer.parseInt(idArg);
        Comentariu c = u.findCommentById(id);
        if (c == null) {
            System.out.println("{'status':'error','message':'The identifier was not valid'}");
        } else {
            for (Utilizator user : c.getLikedByUsers()) {
                user.unlikeComment(c);
            }
            c.getParentPost().removeComment(c);
            System.out.println("{'status':'ok','message':'Operation executed successfully'}");
        }
    }

    /* ============== */
    /* Posts Commands */
    /* ============== */

    public void createPost(HashMap<String, String> args, Utilizator u) {
        String text = args.get("-text");
        if (text == null) {
            System.out.println("{'status':'error','message':'No text provided'}");
            return;
        }
        if (text.length() > 300) {
            System.out.println("{'status':'error','message':'Post text length exceeded'}");
            return;
        }
        Postare p = new Postare(u, text);
        u.addPost(p);
        System.out.println("{'status':'ok','message':'Post added successfully'}");
    }

    public void deletePost(HashMap<String, String> args, Utilizator u) {
        String idArg = args.get("-id");
        if (idArg == null) {
            System.out.println("{'status':'error','message':'No identifier was provided'}");
            return;
        }
        int id = Integer.parseInt(idArg);
        Postare p = u.getPost(id);
        if (p == null) {
            System.out.println("{'status':'error','message':'The identifier was not valid'}");
            return;
        }
        for (Comentariu c : p.getComments()) {
            for (Utilizator user : c.getLikedByUsers()) {
                user.unlikeComment(c);
            }
            c.getParentPost().removeComment(c);
        }
        for (Utilizator user : p.getLikedByUsers()) {
            user.unlikePost(p);
        }
        u.removePost(p);
        System.out.println("{'status':'ok','message':'Post deleted successfully'}");
    }

    /* =================== */
    /* Make Clean Commands */
    /* =================== */

    private static void cleanUp() {
        Utilizator.resetNumberOfUsers();
        Postare.resetNumberOfPosts();
        Comentariu.resetNumberOfComments();
        deleteContent(filenameUsers);
        deleteContent(filenamePosts);
        deleteContent(filenameFollows);
        deleteContent(filenameLikesPost);
        deleteContent(filenameComments);
        deleteContent(filenameLikesComments);
    }

    private static void deleteContent(String filename) {
        try {
            File file = new File(filename);
            FileWriter fileWriter = new FileWriter(file, false);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            bufferedWriter.write("");
            bufferedWriter.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /* ==================== */
    /* Follow/Like Commands */
    /* ==================== */

    public void likePost(HashMap<String, String> args, Utilizator u) {
        String postId = args.get("-post-id");
        if (postId == null) {
            System.out.println("{'status':'error','message':'No post identifier to like was provided'}");
            return;
        }
        int id = Integer.parseInt(postId);
        Postare p = findPostById(id);
        if (p == null || p.isLikedBy(u)) {
            System.out.println("{'status':'error','message':'The post identifier to like was not valid'}");
            return;
        }
        p.likedBy(u);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    public void unlikePost(HashMap<String, String> args, Utilizator u) {
        String postId = args.get("-post-id");
        if (postId == null) {
            System.out.println("{'status':'error','message':'No post identifier to unlike was provided'}");
            return;
        }
        int id = Integer.parseInt(postId);
        Postare p = findPostById(id);
        if (p == null || !p.isLikedBy(u)) {
            System.out.println("{'status':'error','message':'The post identifier to unlike was not valid'}");
            return;
        }
        p.unlikedBy(u);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    public void followUser(HashMap<String, String> args, Utilizator u) {
        String username = args.get("-username");
        if (username == null) {
            System.out.println("{'status':'error','message':'No username to follow was provided'}");
            return;
        }
        Utilizator u2 = findUser(username);
        if (u2 == null || u.FollowsUser(u2)) {
            System.out.println("{'status':'error','message':'The username to follow was not valid'}");
            return;
        }
        u.follow(u2);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    public void unfollowUser(HashMap<String, String> args, Utilizator u) {
        String username = args.get("-username");
        if (username == null) {
            System.out.println("{'status':'error','message':'No username to unfollow was provided'}");
            return;
        }
        Utilizator u2 = findUser(username);
        if (u2 == null || !u.FollowsUser(u2)) {
            System.out.println("{'status':'error','message':'The username to unfollow was not valid'}");
            return;
        }
        u.unfollow(u2);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    public void likeComment(HashMap<String, String> args, Utilizator u) {
        String commentId = args.get("-comment-id");
        if (commentId == null) {
            System.out.println("{'status':'error','message':'No comment identifier to like was provided'}");
            return;
        }
        int id = Integer.parseInt(commentId);
        Comentariu c = findCommentById(id);
        if (c == null || c.isLikedBy(u)) {
            System.out.println("{'status':'error','message':'The comment identifier to like was not valid'}");
            return;
        }
        c.likedBy(u);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    public void unlikeComment(HashMap<String, String> args, Utilizator u) {
        String commentId = args.get("-comment-id");
        if (commentId == null) {
            System.out.println("{'status':'error','message':'No comment identifier to unlike was provided'}");
            return;
        }
        int id = Integer.parseInt(commentId);
        Comentariu c = findCommentById(id);
        if (c == null || !c.isLikedBy(u)) {
            System.out.println("{'status':'error','message':'The comment identifier to unlike was not valid'}");
            return;
        }
        c.unlikedBy(u);
        System.out.println("{'status':'ok','message':'Operation executed successfully'}");
    }

    /* ======================== */
    /* Details Display Commands */
    /* ======================== */

    public void getFollowingsPosts(HashMap<String, String> args, Utilizator u) {
        ArrayList<Utilizator> usersFollowed = u.getFollows();
        ArrayList<Postare> posts = new ArrayList<>();
        for (Utilizator user : usersFollowed) {
            posts.addAll(user.getPosts());
        }
        Collections.sort(posts, new Postare.ReverseDateComparator());
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < posts.size(); i++) {
            Postare p = posts.get(i);
            System.out.print("{'post_id':'" + p.getId() + "','post_text':'" + p.getText() + "','post_date':'" + p.getDate() + "','username':'" + p.getParentUser().getUsername() + "'}");
            if (i != posts.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.print("]}");
    }

    public void getUserPosts(HashMap<String, String> args, Utilizator u) {
        String username = args.get("-username");
        if (username == null) {
            System.out.println("{'status':'error','message':'No username to list posts was provided'}");
            return;
        }
        Utilizator u2 = findUser(username);
        if (u2 == null || !u.FollowsUser(u2)) {
            System.out.println("{'status':'error','message':'The username to list posts was not valid'}");
        } else {
            ArrayList<Postare> posts = u2.getPosts();
            Collections.sort(posts, new Postare.ReverseDateComparator());
            System.out.print("{'status':'ok','message': [");
            for (int i = 0; i < posts.size(); i++) {
                Postare p = posts.get(i);
                System.out.print("{'post_id':'" + p.getId() + "','post_text':'" + p.getText() + "','post_date':'" + p.getDate() + "'}");
                if (i != posts.size() - 1) {
                    System.out.print(",");
                }
            }
            System.out.print("]}");
        }
    }

    public void getPostDetails(HashMap<String, String> args, Utilizator u) {
        String postId = args.get("-post-id");
        if (postId == null) {
            System.out.println("{'status':'error','message':'No post identifier was provided'}");
            return;
        }
        int id = Integer.parseInt(postId);
        Postare p = findPostById(id);

        if (p == null) {
            System.out.println("{'status':'error','message':'The post identifier was not valid'}");
            return;
        }
        if (u.FollowsUser(p.getParentUser()) || u == p.getParentUser()) {
            System.out.print("{'status':'ok','message': [");
            System.out.print("{'post_text':'" + p.getText() + "','post_date':'" + p.getDate() + "','username':'" + p.getParentUser().getUsername() + "','number_of_likes':'" + p.getLikedByUsers().size());
            System.out.print("','comments': [");
            for (int i = 0; i < p.getComments().size(); i++) {
                Comentariu c = p.getComments().get(i);
                System.out.print("{'comment_id':'" + c.getId() + "','comment_text':'" + c.getText() + "','comment_date':'" + c.getDate() + "','username':'" + c.getParentUser().getUsername() + "','number_of_likes':'" + c.getLikedByUsers().size() + "'}");
                if (i != p.getComments().size() - 1) {
                    System.out.print(",");
                }
                System.out.print("] }");
            }
            System.out.print("] }");
        } else {
            System.out.println("{'status':'error','message':'The post identifier was not valid'}");
        }
    }

    public void getFollowing(HashMap<String, String> args, Utilizator u) {
        ArrayList<Utilizator> usersFollowed = u.getFollows();
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < usersFollowed.size(); i++) {
            Utilizator user = usersFollowed.get(i);
            System.out.print("'" + user.getUsername() + "'");
            if (i != usersFollowed.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.print("]}");
    }

    public void getFollowers(HashMap<String, String> args) {
        String username = args.get("-username");
        if(username == null) {
            System.out.println("{'status':'error','message':'No username to list followers was provided'}");
            return;
        }
        Utilizator u = findUser(username);
        if (u == null) {
            System.out.println("{'status':'error','message':'The username to list followers was not valid'}");
        } else {
            ArrayList<Utilizator> usersFollowed = u.getIsFollowedBy();
            System.out.print("{'status':'ok','message': [");
            for (int i = 0; i < usersFollowed.size(); i++) {
                Utilizator user = usersFollowed.get(i);
                System.out.print("'" + user.getUsername() + "'");
                if (i != usersFollowed.size() - 1) {
                    System.out.print(",");
                }
            }
            System.out.print("]}");
        }
    }

    public void getMostLikedPosts() {
        ArrayList<Postare> posts = new ArrayList<>();
        for (Utilizator user : users) {
            posts.addAll(user.getPosts());
        }
        Collections.sort(posts, new Postare.ReverseLikeComparator());
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < posts.size() && i < 5; i++) {
            Postare p = posts.get(i);
            System.out.print("{'post_id':'" + p.getId() + "','post_text':'" + p.getText() + "','post_date':'" + p.getDate() + "','username':'" + p.getParentUser().getUsername() + "','number_of_likes':'" + p.getLikedByUsers().size() + "'}");
            if (i != posts.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.print(" ]}");
    }

    public void getMostCommentedPosts() {
        ArrayList<Postare> posts = new ArrayList<>();
        for (Utilizator user : users) {
            posts.addAll(user.getPosts());
        }
        Collections.sort(posts, new Postare.ReverseCommentComparator());
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < posts.size() && i < 5; i++) {
            Postare p = posts.get(i);
            System.out.print("{'post_id':'" + p.getId() + "','post_text':'" + p.getText() + "','post_date':'" + p.getDate() + "','username':'" + p.getParentUser().getUsername() + "','number_of_comments':'" + p.getComments().size() + "'}");
            if (i != posts.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.print("]}");
    }

    public void getMostFollowedUsers() {
        ArrayList<Utilizator> copyOfUsers = new ArrayList<>();
        for (Utilizator uIndex : users) {
            copyOfUsers.add(uIndex);
        }
        Collections.sort(copyOfUsers, new Utilizator.ReverseFollowComparator());
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < copyOfUsers.size() && i < 5; i++) {
            Utilizator uIndex = copyOfUsers.get(i);
            System.out.print("{'username':'" + uIndex.getUsername() + "','number_of_followers':'" + uIndex.getIsFollowedBy().size() + "'}");
            if (i != copyOfUsers.size() - 1 && i != 4) {
                System.out.print(",");
            }
        }
        System.out.print(" ]}");
    }

    public void getMostLikedUsers() {
        ArrayList<Utilizator> copyOfUsers = new ArrayList<>();
        for (Utilizator uIndex : users) {
            copyOfUsers.add(uIndex);
        }
        Collections.sort(copyOfUsers, new Utilizator.ReverseLikesComparator());
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < copyOfUsers.size() && i < 5; i++) {
            Utilizator uIndex = copyOfUsers.get(i);
            System.out.print("{'username':'" + uIndex.getUsername() + "','number_of_likes':'" + uIndex.getNumberOfLikes() + "'}");
            if (i != copyOfUsers.size() - 1 && i != 4) {
                System.out.print(",");
            }
        }
        System.out.print("]}");
    }

    private static HashMap<String, String> parseArguments(String[] strings) {
        HashMap<String, String> map = new HashMap<>();
        for (int i = 0; i < strings.length; i++) {
            if (!strings[i].startsWith("-")) {
                throw new RuntimeException("Invalid command");
            }
            if ((i == strings.length - 1) || (i != strings.length - 1 && strings[i + 1].startsWith("-"))) {
                map.put("command", strings[i]);
                continue;
            }
            map.put(strings[i], strings[i + 1]);
            i++;
        }
        return map;
    }

    public static void main(String[] strings) {
        /* Dummy Test Check */
        if (strings == null) {
            System.out.println("Hello world!");
            return;
        }
        /* Clean-Up Test Check */
        if (strings[0].equals("-cleanup-all")) {
            App.cleanUp();
            return;
        }

        /* Create the App and Build the App based on the Data in the csv files */
        App a = new App();

        /* Reformat the Args Array */
        strings = recreateStrings(strings);

        /* Parse the Arguments using a Hash Map */
        HashMap<String, String> args = parseArguments(strings);
        String command = args.get("command");

        Utilizator user = null;
        if (!command.equals("-create-user")) {
            if (args.get("-u") == null || args.get("-p") == null) {
                System.out.println("{'status':'error','message':'You need to be authenticated'}");
                return;
            }
            user = a.findUser(args.get("-u"));
            if (user == null || !user.cmpPassword(args.get("-p"))) {
                System.out.println("{'status':'error','message':'Login failed'}");
                return;
            }
        }

        /* Check for all the other Commands */
        switch (command) {
            case "-create-user":
                a.createUser(args);
                break;
            case "-create-post":
                a.createPost(args, user);
                break;
            case "-delete-post-by-id":
                a.deletePost(args, user);
                break;
            case "-follow-user-by-username":
                a.followUser(args, user);
                break;
            case "-unfollow-user-by-username":
                a.unfollowUser(args, user);
                break;
            case "-like-post":
                a.likePost(args, user);
                break;
            case "-unlike-post":
                a.unlikePost(args, user);
                break;
            case "-comment-post":
                a.createComment(args, user);
                break;
            case "-like-comment":
                a.likeComment(args, user);
                break;
            case "-unlike-comment":
                a.unlikeComment(args, user);
                break;
            case "-delete-comment-by-id":
                a.deleteComment(args, user);
                break;
            case "-get-followings-posts":
                a.getFollowingsPosts(args, user);
                break;
            case "-get-user-posts":
                a.getUserPosts(args, user);
                break;
            case "-get-post-details":
                a.getPostDetails(args, user);
                break;
            case "-get-following":
                a.getFollowing(args, user);
                break;
            case "-get-followers":
                a.getFollowers(args);
                break;
            case "-get-most-liked-posts":
                a.getMostLikedPosts();
                break;
            case "-get-most-commented-posts":
                a.getMostCommentedPosts();
                break;
            case "-get-most-followed-users":
                a.getMostFollowedUsers();
                break;
            case "-get-most-liked-users":
                a.getMostLikedUsers();
                break;
        }

        /* Rewrite the csv files after the changes */
        a.writeUsers(filenameUsers);
        a.writePosts(filenamePosts);
        a.writeFollows(filenameFollows);
        a.writeLikesPost(filenameLikesPost);
        a.writeComments(filenameComments);
        a.writeLikesComments(filenameLikesComments);
    }

}